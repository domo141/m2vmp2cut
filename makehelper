#!/bin/sh
# -*- mode: shell-script; sh-basic-offset: 8; tab-width: 8 -*-

set -eu
#set -x

warn () { echo "$@" >&2; }
disable_die () { die () { return 1; }; }
enable_die () { die () { echo "$@" >&2; exit 1; }; }
enable_die

x () { echo "$@"; "$@"; }

# Robust, fast (string) comparisons for all Bourne-derived shells.
eq () { case $1 in $2) return 0; esac; return 1; }
ne () { case $1 in $2) return 1; esac; return 0; }

needvar ()
{
	eval v=\${$1-}
	case $v in '') return 1
	;;	*' '*)	die "'$1' value '$v' contains space[s]!"
	esac
	return 0
}

needcmd ()
{
	hash $1 2>/dev/null || {
		c=$1; shift
		die "Command '$c' missing ($*)"
	}
}

getversion ()
{
	VERSION=`sed 's/^m2vmp2cut *//; s/ .*//; q' NEWS`
	case $VERSION in wip | *-wip ) ;;
		[0-9][0-9.][0-9] | [0-9][0-9.][0-9.][0-9] ) ;;
		[0-9][0-9.][0-9.][0-9.][0-9] ) ;;
		[0-9][0-9.][0-9.][0-9.][0-9.][0-9] ) ;;
		*) die "Strange VERSION '$VERSION' string"
	esac
}

cmd_install ()
{
	getversion
	needvar PREFIX || {
		sed -n 's/^#msg1: \?//p;' "$0"
		exit 1
	}

	needcmd mplex needed for remuxing after cut
	needcmd mplayer needed for checking media around cutpoints
	if needvar PJXVAR
	then
		case $PJXJAR in /*) ;;
			*) die "'$PJXJAR' does not start with '/'"
		esac
		test -f $PJXJAR || die "'$PJXJAR': no such file"
		needcmd java
	else
		disable_die
		needcmd projectx || {
			sed -n 's/^#msg2: \?//p;' "$0"
			exit 1
		}
		enable_die
	fi

	for f in $1 $2 m2vmp2cut
	do	test -f $f || die "'$f' missing"
	done

	case $VERSION in *wip*)
		if test -d .git
		then
			VERSION=$VERSION-g`git log -1 --format=format:%h`
		else
			x=`expr "\`pwd\`" : '.*\(-g[0-9a-f]*\)$' || :`
			case $x in '') ;; *) VERSION=${VERSION}$x ;; esac
		fi
	esac

	if ne "${LIBEXECDIR-}" ''
	then
		needvar LIBEXECDIR # variable content check (spaces...)
		M2VMP2CUTDIR=$LIBEXECDIR/m2vmp2cut-$VERSION
	else
		case $PREFIX in /usr|/usr/|/usr/local|/usr/local/) lib=libexec
			;; *) lib=lib; esac
		M2VMP2CUTDIR=$PREFIX/$lib/m2vmp2cut-$VERSION
	fi
	unset LIBEXECDIR

	if ne "${DATAROOTDIR-}" ''
	then
		needvar DATAROOTDIR # variable content check (spaces...)
		DATADIR=$DATAROOTDIR/m2vmp2cut-$VERSION
	else
		DATADIR=$M2VMP2CUTDIR/doc
	fi
	unset DATAROOTDIR

	D_PREFIX=${DESTDIR-}$PREFIX
	D_M2VMP2CUTDIR=${DESTDIR-}$M2VMP2CUTDIR
	D_DATADIR=${DESTDIR-}$DATADIR

	echo; echo Begin installation.; echo
	rm -rf "$D_M2VMP2CUTDIR"
	x mkdir -m 755 -p "$D_M2VMP2CUTDIR"
	test -d "$D_PREFIX" || x mkdir -m 755 -p "$D_PREFIX"

	test -d "$D_PREFIX"/bin || x mkdir -m 755 "$D_PREFIX"/bin
	x mkdir -m 755 "$D_M2VMP2CUTDIR"/bin "$D_M2VMP2CUTDIR"/contrib

	x mkdir -m 755 -p "$D_DATADIR" # no test as datadir seldom exists...
	test -d "$D_M2VMP2CUTDIR"/doc || x ln -s "$DATADIR" "$D_M2VMP2CUTDIR"/doc
	x cp $1 "$D_M2VMP2CUTDIR"/bin
	x cp $2 "$D_DATADIR"
	x cp contrib/* "$D_M2VMP2CUTDIR"/contrib
	case $VERSION in wip) verinfo="$VERSION (installed `date +%Y-%m-%d`)"
	;;	*) verinfo=$VERSION
	esac
	exec 3> "$D_PREFIX"/bin/m2vmp2cut.wip
	echo '#!/bin/sh' >&3
	echo 'case ${1-} in'" '') echo; echo 'm2vmp2cut version $verinfo'" >&3
	echo 'esac' >&3
	echo "exec $M2VMP2CUTDIR/bin/m2vmp2cut.sh"' "$@"' >&3
	exec 3>&-
	chmod 755 "$D_PREFIX"/bin/m2vmp2cut.wip
	mv "$D_PREFIX"/bin/m2vmp2cut.wip "$D_PREFIX"/bin/m2vmp2cut
	echo wrote $PREFIX/bin/m2vmp2cut

	if ne "${PJXJAR-}" ''
	then
		x ln -s $PJXJAR "$D_M2VMP2CUTDIR"/bin/ProjectX.jar
	fi
	echo; echo Installation done.; echo
}

makedist ()
{
	ct=`exec git --no-pager log -1 --pretty='%ct'`
	grep '^#,#' "$0" | perl -anle '
		use strict; use warnings; BEGIN {require "tools/tarlisted.pm";}
		our ($f, @go);
		BEGIN { $f = shift; tarlisted_open $f . ".tar.xz", "xz"; }
		BEGIN { my $t = shift; @go = ( $t, 0, 0, "root", "root" ); }
		BEGIN { &tarlisted_mkdir ($f, 0755, @go); }
		&tarlisted_mkdir ("$f/$F[1]", 0755, @go), next if -d $F[1];
		my $perm = (defined $F[2] and $F[2] eq "x")? 0755: 0644;
		print "Adding $F[1]...";
		tarlisted_cp $F[1], "$f/$F[1]", $perm, @go;
		END { my $ev = $?; tarlisted_close; exit $ev; }
	' m2vmp2cut-$VERSION $ct
	echo Created m2vmp2cut-$VERSION.tar.xz

}

cmd_snapshot ()
{
	# XXX any git suffices ;/
	test -d .git || die "Snapshotting only from git working copies"
	VERSION=`sed 's/^m2vmp2cut *//; s/ .*//; q' NEWS`
	case $VERSION in 'wip') VERSION=`date +"snap-%Y%m%d-%H"` ;;
		*-wip) VERSION=$VERSION-g`git log -1 --format=format:%h` ;;
		*) die "Snapshotting only 'wip' versions"
	esac
	makedist
}

cmd_release ()
{
	git status | awk ' \
		/# Changes to be committed/ { print; exit 1 }
		/# Changed but not updated/ { print; exit 1 }
		/# Changes not staged for commit/ { print; exit 1 }'
#		/# Your branch is ahead of/ { print; exit 1 }'

	getversion
	case $VERSION in *wip) die "Version 'wip'. Please update"; esac
	echo Version $VERSION
	v=`sed '1d;2q' ANNOUNCE`
	case $v in "m2vmp2cut $VERSION") ;; *) die ANNOUNCE: fix $v; esac
	v=`sed '1d;2q' README`
	case $v in "m2vmp2cut $VERSION") ;; *) die README: fix $v; esac
	makedist
}

cmd_diffa ()
{
	getversion
	case ${1-} in '') die Usage: make diffa P=prevver; esac
	case ${2-} in '') set $1 $VERSION; esac
	x test -f m2vmp2cut-$1.tar.xz
	x test -f m2vmp2cut-$2.tar.xz
	diffa.sh 88 m2vmp2cut-$1.tar.xz m2vmp2cut-$2.tar.xz > diff-$1-$2.html
}


cmd_ ()
{
	warn Usage: $0 command [args...]
	warn Commands available:
	sed -n 's/^cmd_\([^ ][^ ]*\) (.*/  \1/p' "$0"
}

cmd=${1-}; shift || :
cmd_"$cmd" "$@"
exit


# Embedded messages follow...

#msg1:
#msg1:  Can not install: PREFIX missing.
#msg1:
#msg1:  Try something like 'make install PREFIX=/usr/local [PJXJAR=...]'
#msg1:                 or  'make install PREFIX=$HOME'
#msg1:
#msg1:  Content written to $PREFIX/bin/m2vmp2cut and $PREFIX/lib/m2vmp2cut/...
#msg1:

#msg2:
#msg2:  Can not install: can not find ProjectX.
#msg2:
#msg2:  Try 'make install PREFIX=... PJXJAR=/path/to/ProjectX.jar'
#msg2:



# Dist files:

#,# ANNOUNCE
#,# COPYING
#,# NEWS
#,# INSTALL
#,# m2vmp2cut x
#,# Makefile
#,# makehelper x
#,# README

#,# bin
#,# bin/assel.pl x
#,# bin/getmp2.sh x
#,# bin/getyuv.pl x
#,# bin/lvev6frames.pl x
#,# bin/m2v_catfiltered.py x
#,# bin/m2vmp2cut.pl x
#,# bin/m2vmp2cut.pm
#,# bin/m2vmp2cut.sh x
#,# bin/m2v_somehdrinfo.py x
#,# bin/merge.pl x
#,# bin/pxsuptime.py x
#,# bin/wrapper.sh x

#,# contrib
#,# contrib/ffgetyuv.pl x
#,# contrib/icut.pl x
#,# contrib/mpeg2.sh x
#,# contrib/webm.sh x

#,# doc
#,# doc/Examples
#,# doc/m2vcut_help-default
#,# doc/m2vcut_help-fi_FI
#,# doc/Options
#,# doc/Usage

#,# src
#,# src/assel-gui.c
#,# src/bufwrite.c
#,# src/bufwrite.h
#,# src/fileparts.c
#,# src/filerotate.c
#,# src/libpreload_ffm2vtoyuv4mpeghax.c
#,# src/m2vcut-gui.c
#,# src/m2vfilter.c
#,# src/m2vscan.c
#,# src/m2vstream.c
#,# src/m2vtoyuv.c
#,# src/Makefile
#,# src/merge-gui.c
#,# src/mp2cutpoints.c
#,# src/pgssupout.c
#,# src/textdisp.c
#,# src/x.c
#,# src/x.h
#,# src/zzob.c
#,# src/zzob.h

#,# tools
#,# tools/buildlibmpeg-051.sh x
#,# tools/chksyslibmpeg.sh x
#,# tools/chklibmpeg-051.sh x
#,# tools/tarlisted.pm

#EOF
